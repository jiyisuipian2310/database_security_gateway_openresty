user  root;
worker_processes  auto;

daemon on;
#pid logs/nginx.pid;

#error_log  logs/error.log  info;
error_log  logs/error.log info;
#error_log  /dev/stdout info;

events {
    worker_connections  1024;
}

http {
    lua_package_path '{path}/mysql_proxy/lualib/?.lua;{path}/mysql_proxy/nginx/mylua/?.lua;{path}/mysql_proxy/lualib/?.ljbc;{path}/mysql_proxy/lualib/?/init.ljbc;{path}/mysql_proxy/lualib/?/init.lua;;';
    lua_package_cpath "{path}/mysql_proxy/lualib/?.so;;";

    include       mime.types;
    default_type  application/octet-stream;
    
    server {
        listen 3901;
        server_name localhost;

        location /getdbAddress {
            content_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                local cjson = require "cjson.safe"
                local data = cjson.decode(body)
                local jsonarr = {}
                table.insert(jsonarr, {vpPort="9400",targetIp="192.168.104.100",targetPort="33060",targetType="11"})
                table.insert(jsonarr, {vpPort="9401",targetIp="192.168.100.20",targetPort="5432",targetType="11"})
                table.insert(jsonarr, {vpPort="9402",targetIp="192.168.100.21",targetPort="5432",targetType="11"})
                local json_str = cjson.encode(jsonarr)
                ngx.print(json_str)
            }
        }
    }

    server {
        listen       1202;
        server_name  localhost;

        location /unlock_account {
            content_by_lua_block {
                local reader = require "deal_http_msg"
                reader.forward_http_msg("unlock_account", true)
            }
        }
        
        location /lock_account {
            content_by_lua_block {
                local reader = require "deal_http_msg"
                reader.forward_http_msg("lock_account", true)
            }
        }

        location /add_db_control_policy {
            content_by_lua_block {
                local reader = require "deal_http_msg"
                reader.forward_http_msg("add_db_control_policy", true)
            }
        }

        location /delete_db_control_policy {
            content_by_lua_block {
                local reader = require "deal_http_msg"
                reader.forward_http_msg("delete_db_control_policy", true)
            }
        }

        location /update_db_control_policy {
            content_by_lua_block {
                local reader = require "deal_http_msg"
                reader.forward_http_msg("update_db_control_policy", true)
            }
        }

        location /get_db_current_config_info {
            content_by_lua_block {
                local reader = require "deal_http_msg"
                reader.send_and_recv_msg("get_db_current_config_info")
            }
        }
    }
}

stream {
    lua_package_path '{path}/mysql_proxy/lualib/?.lua;{path}/mysql_proxy/nginx/mylua/?.lua;{path}/mysql_proxy/lualib/?.ljbc;{path}/mysql_proxy/lualib/?/init.ljbc;{path}/mysql_proxy/lualib/?/init.lua;;';
    lua_package_cpath "{path}/mysql_proxy/lualib/?.so;;";
    
    lua_shared_dict mysql_audit_log 20m;
    lua_shared_dict locks 10m;
    lua_shared_dict current_db_connect_number 10m;
    lua_shared_dict mysql_proxy_app_logs 100m;

    #lua_code_cache off;

    bwda_proxy_switch off;
    bwda_proxy_sm4_switch off;

    lua_socket_buffer_size 16k;

    init_by_lua_block {
        local cfgreader = require "init"
        local cfg_file = "{path}/mysql_proxy/conf/globalConfig.json"
        cfgreader.get_global_cfg(cfg_file)

        -- ngx.log(ngx.INFO, "lua package.path: ", package.path)
        -- ngx.log(ngx.INFO, "lua package.cpath: ", package.cpath)
    }
    
    init_worker_by_lua_block {
        local initer = require("init_worker")
        initer.init_worker()
    }
    
    server {
        listen 9400-9402;
        proxy_timeout 1h;
        content_by_lua_block {
            local mysql_proxy = require "mysql_proxy_app"
            mysql_proxy.run()
        }
    }

    server {
        listen 2346;
        content_by_lua_block {
            local sock = ngx.req.socket(true)
            local clientdata, err = sock:receiveany(81920)  -- 非阻塞读取
            if clientdata then
                local parser = require "parse_opcode_msg"
                parser.parse_opcode_msg(sock, clientdata)
            end
        }
    }
}
