/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Messages_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ResultInfo::~ResultInfo() throw() {
}


void ResultInfo::__set_iCode(const int32_t val) {
  this->iCode = val;
}

void ResultInfo::__set_strValue(const std::string& val) {
  this->strValue = val;
}

uint32_t ResultInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iCode);
          this->__isset.iCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strValue);
          this->__isset.strValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResultInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResultInfo");

  xfer += oprot->writeFieldBegin("iCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->iCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strValue", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->strValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResultInfo &a, ResultInfo &b) {
  using ::std::swap;
  swap(a.iCode, b.iCode);
  swap(a.strValue, b.strValue);
  swap(a.__isset, b.__isset);
}

ResultInfo::ResultInfo(const ResultInfo& other0) {
  iCode = other0.iCode;
  strValue = other0.strValue;
  __isset = other0.__isset;
}
ResultInfo& ResultInfo::operator=(const ResultInfo& other1) {
  iCode = other1.iCode;
  strValue = other1.strValue;
  __isset = other1.__isset;
  return *this;
}
void ResultInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResultInfo(";
  out << "iCode=" << to_string(iCode);
  out << ", " << "strValue=" << to_string(strValue);
  out << ")";
}


ReqInfo::~ReqInfo() throw() {
}


void ReqInfo::__set_iCode(const int32_t val) {
  this->iCode = val;
}

void ReqInfo::__set_strValue(const std::string& val) {
  this->strValue = val;
}

uint32_t ReqInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iCode);
          this->__isset.iCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strValue);
          this->__isset.strValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReqInfo");

  xfer += oprot->writeFieldBegin("iCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->iCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strValue", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->strValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqInfo &a, ReqInfo &b) {
  using ::std::swap;
  swap(a.iCode, b.iCode);
  swap(a.strValue, b.strValue);
  swap(a.__isset, b.__isset);
}

ReqInfo::ReqInfo(const ReqInfo& other2) {
  iCode = other2.iCode;
  strValue = other2.strValue;
  __isset = other2.__isset;
}
ReqInfo& ReqInfo::operator=(const ReqInfo& other3) {
  iCode = other3.iCode;
  strValue = other3.strValue;
  __isset = other3.__isset;
  return *this;
}
void ReqInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReqInfo(";
  out << "iCode=" << to_string(iCode);
  out << ", " << "strValue=" << to_string(strValue);
  out << ")";
}


BaseSKB::~BaseSKB() throw() {
}


void BaseSKB::__set_iCode(const int32_t val) {
  this->iCode = val;
}

void BaseSKB::__set_iGuid(const int64_t val) {
  this->iGuid = val;
}

void BaseSKB::__set_strSKB(const std::string& val) {
  this->strSKB = val;
}

void BaseSKB::__set_iVPPort(const int32_t val) {
  this->iVPPort = val;
}

void BaseSKB::__set_iVCPort(const int32_t val) {
  this->iVCPort = val;
}

uint32_t BaseSKB::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iCode);
          this->__isset.iCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->iGuid);
          this->__isset.iGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strSKB);
          this->__isset.strSKB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iVPPort);
          this->__isset.iVPPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iVCPort);
          this->__isset.iVCPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BaseSKB::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BaseSKB");

  xfer += oprot->writeFieldBegin("iCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->iCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iGuid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->iGuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strSKB", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->strSKB);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iVPPort", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->iVPPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iVCPort", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->iVCPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BaseSKB &a, BaseSKB &b) {
  using ::std::swap;
  swap(a.iCode, b.iCode);
  swap(a.iGuid, b.iGuid);
  swap(a.strSKB, b.strSKB);
  swap(a.iVPPort, b.iVPPort);
  swap(a.iVCPort, b.iVCPort);
  swap(a.__isset, b.__isset);
}

BaseSKB::BaseSKB(const BaseSKB& other4) {
  iCode = other4.iCode;
  iGuid = other4.iGuid;
  strSKB = other4.strSKB;
  iVPPort = other4.iVPPort;
  iVCPort = other4.iVCPort;
  __isset = other4.__isset;
}
BaseSKB& BaseSKB::operator=(const BaseSKB& other5) {
  iCode = other5.iCode;
  iGuid = other5.iGuid;
  strSKB = other5.strSKB;
  iVPPort = other5.iVPPort;
  iVCPort = other5.iVCPort;
  __isset = other5.__isset;
  return *this;
}
void BaseSKB::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BaseSKB(";
  out << "iCode=" << to_string(iCode);
  out << ", " << "iGuid=" << to_string(iGuid);
  out << ", " << "strSKB=" << to_string(strSKB);
  out << ", " << "iVPPort=" << to_string(iVPPort);
  out << ", " << "iVCPort=" << to_string(iVCPort);
  out << ")";
}


