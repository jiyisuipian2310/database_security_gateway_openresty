/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Messages_TYPES_H
#define Messages_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class ResultInfo;

class ReqInfo;

class BaseSKB;

typedef struct _ResultInfo__isset {
  _ResultInfo__isset() : iCode(false), strValue(false) {}
  bool iCode :1;
  bool strValue :1;
} _ResultInfo__isset;

class ResultInfo : public virtual ::apache::thrift::TBase {
 public:

  ResultInfo(const ResultInfo&);
  ResultInfo& operator=(const ResultInfo&);
  ResultInfo() : iCode(0), strValue() {
  }

  virtual ~ResultInfo() throw();
  int32_t iCode;
  std::string strValue;

  _ResultInfo__isset __isset;

  void __set_iCode(const int32_t val);

  void __set_strValue(const std::string& val);

  bool operator == (const ResultInfo & rhs) const
  {
    if (!(iCode == rhs.iCode))
      return false;
    if (!(strValue == rhs.strValue))
      return false;
    return true;
  }
  bool operator != (const ResultInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResultInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResultInfo &a, ResultInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ResultInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ReqInfo__isset {
  _ReqInfo__isset() : iCode(false), strValue(false) {}
  bool iCode :1;
  bool strValue :1;
} _ReqInfo__isset;

class ReqInfo : public virtual ::apache::thrift::TBase {
 public:

  ReqInfo(const ReqInfo&);
  ReqInfo& operator=(const ReqInfo&);
  ReqInfo() : iCode(0), strValue() {
  }

  virtual ~ReqInfo() throw();
  int32_t iCode;
  std::string strValue;

  _ReqInfo__isset __isset;

  void __set_iCode(const int32_t val);

  void __set_strValue(const std::string& val);

  bool operator == (const ReqInfo & rhs) const
  {
    if (!(iCode == rhs.iCode))
      return false;
    if (!(strValue == rhs.strValue))
      return false;
    return true;
  }
  bool operator != (const ReqInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReqInfo &a, ReqInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ReqInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BaseSKB__isset {
  _BaseSKB__isset() : iCode(false), iGuid(false), strSKB(false), iVPPort(false), iVCPort(false) {}
  bool iCode :1;
  bool iGuid :1;
  bool strSKB :1;
  bool iVPPort :1;
  bool iVCPort :1;
} _BaseSKB__isset;

class BaseSKB : public virtual ::apache::thrift::TBase {
 public:

  BaseSKB(const BaseSKB&);
  BaseSKB& operator=(const BaseSKB&);
  BaseSKB() : iCode(0), iGuid(0), strSKB(), iVPPort(0), iVCPort(0) {
  }

  virtual ~BaseSKB() throw();
  int32_t iCode;
  int64_t iGuid;
  std::string strSKB;
  int32_t iVPPort;
  int32_t iVCPort;

  _BaseSKB__isset __isset;

  void __set_iCode(const int32_t val);

  void __set_iGuid(const int64_t val);

  void __set_strSKB(const std::string& val);

  void __set_iVPPort(const int32_t val);

  void __set_iVCPort(const int32_t val);

  bool operator == (const BaseSKB & rhs) const
  {
    if (!(iCode == rhs.iCode))
      return false;
    if (!(iGuid == rhs.iGuid))
      return false;
    if (!(strSKB == rhs.strSKB))
      return false;
    if (!(iVPPort == rhs.iVPPort))
      return false;
    if (!(iVCPort == rhs.iVCPort))
      return false;
    return true;
  }
  bool operator != (const BaseSKB &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseSKB & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BaseSKB &a, BaseSKB &b);

inline std::ostream& operator<<(std::ostream& out, const BaseSKB& obj)
{
  obj.printTo(out);
  return out;
}



#endif
